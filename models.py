import os
import tensorflow as tf
from tensorflow.keras import Model
from keras.callbacks import ModelCheckpoint

# MNIST 데이터셋 심층신경망 모델 구성
class base_CNN(Model):
    def __init__(self):
        super(base_CNN, self).__init__()
        self.model = self.build_model()

    def build_model(self):
        model = tf.keras.models.Sequential([
            tf.keras.layers.Conv2D(32, (5, 5), activation='relu', padding='same', input_shape=(256, 256, 1)),
            tf.keras.layers.MaxPool2D((2, 2)),
            tf.keras.layers.Conv2D(64, (5, 5), activation='relu'),
            tf.keras.layers.MaxPool2D((2, 2)),
            tf.keras.layers.Flatten(),
            tf.keras.layers.Dense(1024, activation='relu'),
            tf.keras.layers.Dense(64, activation='relu'),
            tf.keras.layers.Dense(2),
        ])
        return model

    def call(self, inputs):
        return self.model(inputs)

    def predict_classes(self, inputs):
        return self.model.predict_classes(inputs)


# # MNIST 데이터셋 심층신경망 모델 학습
# def MNIST_model(x_train, y_train, x_test, y_test):

#     os.makedirs(f'./models/', exist_ok=True)

#     checkpoint_path = f'./models/'

#     model = mnist_CNN()

#     # MNIST 학습 checkpoint
#     checkpoint = ModelCheckpoint(checkpoint_path,
#                                 save_best_only=True,
#                                 save_weights_only=True,
#                                 monitor='val_accuracy',
#                                 verbose=1)

#     loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

#     model.compile(optimizer='adam',
#                 loss=loss_fn,
#                 metrics=['accuracy'])
#     model.fit(x_train, y_train, epochs=10, shuffle=True, validation_data=(x_test, y_test), callbacks=[checkpoint],)

#     print(f'model Traing evaluate: {model.evaluate(x_train, y_train)}')
#     print(f'model Test evaluate: {model.evaluate(x_test, y_test)}')

#     model.save(checkpoint_path)

#     return model