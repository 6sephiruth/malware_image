import numpy as np
import random
import os
import tensorflow as tf
import tensorflow_datasets as tfds
from skimage.color import rgb2gray
from sklearn.metrics import accuracy_score, precision_score, recall_score

# random SEED 고정 함수
def set_seed(num_seed):
    random.seed(num_seed)
    os.environ['PYTHONHASHSEED'] = str(num_seed)
    np.random.seed(num_seed)
    tf.random.set_seed(num_seed)

# 폴더 생성 함수
def mkdir(dir_names):
    for d in dir_names:
        if not os.path.exists(d):
            os.mkdir(d)

# 폴더 존재 여부 체크 함수
def exists(pathname):
    return os.path.exists(pathname)

def load_dataset_malevis_224():

    ds_dir = tfds.ImageFolder('./dataset/malevis_train_val_224x224/gyumin_2_label/')
    ds_dir = ds_dir.as_dataset(batch_size=128, shuffle_files=True) # split=['train', 'test'], shuffle_files=True

    train_ds, test_ds = ds_dir["train"], ds_dir["test"]

    for idx, train_take in enumerate(train_ds.take(len(train_ds))):
        if idx == 0:
            x_train = train_take['image'].numpy()
            y_train = train_take['label'].numpy()        
        else:
            x_train = np.concatenate([x_train, train_take['image'].numpy()])
            y_train = np.concatenate([y_train, train_take['label'].numpy()])

    for idx, test_take in enumerate(test_ds.take(len(test_ds))):
        if idx == 0:
            x_test = test_take['image'].numpy()
            y_test = test_take['label'].numpy()        
        else:
            x_test = np.concatenate([x_test, test_take['image'].numpy()])
            y_test = np.concatenate([y_test, test_take['label'].numpy()])

    # normalization data & grayScale iamge
    x_train = np.reshape(rgb2gray(x_train), (len(x_train), 224, 224, 1)) /255.0
    x_test = np.reshape(rgb2gray(x_test), (len(x_test), 224, 224, 1)) / 255.0

    return x_train, y_train, x_test, y_test

def model_evaluate_print(model, x_train, y_train, x_test, y_test):

    train_pred = model.predict(x_train)
    test_pred = model.predict(x_test)

    train_pred = np.argmax(train_pred, axis=1)
    test_pred = np.argmax(test_pred, axis=1)

    print(f' Train Prec :\t{accuracy_score(train_pred, y_train)}')
    print(f' Test Prec :\t{accuracy_score(test_pred, y_test)}')
    print()

    print(f' Train Prec :\t{precision_score(train_pred, y_train, pos_label=1)}')
    print(f' Test Prec :\t{precision_score(test_pred, y_test, pos_label=1)}')
    print()

    print(f' Train Recall :\t{recall_score(train_pred, y_train, pos_label=1)}')
    print(f' Test Recall :\t{recall_score(test_pred, y_test, pos_label=1)}')
